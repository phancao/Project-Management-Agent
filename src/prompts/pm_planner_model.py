# Copyright (c) 2025 Bytedance Ltd. and/or its affiliates
# SPDX-License-Identifier: MIT

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class PMStepType(str, Enum):
    """Project Management step types"""
    CREATE_PROJECT = "create_project"
    CREATE_WBS = "create_wbs"
    SPRINT_PLANNING = "sprint_planning"
    TASK_ASSIGNMENT = "task_assignment"
    RESEARCH = "research"
    CREATE_REPORT = "create_report"
    GANTT_CHART = "gantt_chart"
    DEPENDENCY_ANALYSIS = "dependency_analysis"
    LIST_PROJECTS = "list_projects"
    LIST_TASKS = "list_tasks"
    LIST_SPRINTS = "list_sprints"
    GET_PROJECT_STATUS = "get_project_status"
    SWITCH_PROJECT = "switch_project"
    SWITCH_SPRINT = "switch_sprint"
    SWITCH_TASK = "switch_task"
    UPDATE_TASK = "update_task"
    UPDATE_SPRINT = "update_sprint"
    UNKNOWN = "unknown"


class PMStep(BaseModel):
    """A single step in a project management plan"""
    step_type: PMStepType = Field(..., description="Type of PM task to execute")
    title: str = Field(..., description="Short title describing the step")
    description: str = Field(..., description="Detailed description of what to do")
    requires_context: bool = Field(
        default=True, 
        description="Whether this step needs context from previous steps"
    )
    execution_res: Optional[str] = Field(
        default=None, 
        description="Execution result after completion"
    )


class PMPlan(BaseModel):
    """Project Management execution plan"""
    locale: str = Field(
        ..., 
        description="e.g. 'en-US' or 'vi-VN', based on user's language"
    )
    overall_thought: str = Field(
        ..., 
        description="Overall approach and reasoning"
    )
    steps: List[PMStep] = Field(
        default_factory=list,
        description="Sequential steps to execute"
    )

    class Config:
        json_schema_extra = {
            "examples": [
                {
                    "locale": "en-US",
                    "overall_thought": "I will create a comprehensive WBS first, then plan two sprints based on task priorities and capacity.",
                    "steps": [
                        {
                            "step_type": "create_wbs",
                            "title": "Create WBS for QA Automation Project",
                            "description": "Generate a detailed Work Breakdown Structure with phases, deliverables, and tasks",
                            "requires_context": False
                        },
                        {
                            "step_type": "sprint_planning",
                            "title": "Plan Sprint 1",
                            "description": "Create first 2-week sprint with task assignments",
                            "requires_context": True
                        },
                        {
                            "step_type": "sprint_planning",
                            "title": "Plan Sprint 2",
                            "description": "Create second 2-week sprint with remaining tasks",
                            "requires_context": True
                        }
                    ]
                }
            ]
        }


class SprintTaskAssignment(BaseModel):
    """Task assignment in a sprint plan"""
    task_id: str = Field(..., description="UUID of the task")
    title: str = Field(..., description="Task title")
    estimated_hours: float = Field(..., description="Estimated hours for this task")
    priority: str = Field(..., description="Priority level: high, medium, or low")
    assigned_to: str = Field(..., description="Team member assigned to this task")


class SprintPlanSummary(BaseModel):
    """Summary statistics for a sprint plan"""
    total_capacity: float = Field(..., description="Total sprint capacity in hours")
    planned_hours: float = Field(..., description="Total hours planned")
    utilization_percent: float = Field(..., description="Capacity utilization percentage")
    tasks_count: int = Field(..., description="Number of tasks assigned")
    team_members: List[str] = Field(..., description="List of team member names")
    sprint_goal: str = Field(..., description="One sentence describing the sprint goal")


class SprintPlan(BaseModel):
    """Sprint plan generated by LLM"""
    sprint_name: str = Field(..., description="Goal-oriented sprint name (e.g., 'Foundation Setup')")
    selected_tasks: List[SprintTaskAssignment] = Field(
        default_factory=list,
        description="List of tasks assigned to this sprint"
    )
    summary: SprintPlanSummary = Field(..., description="Summary statistics and sprint goal")
    
    class Config:
        json_schema_extra = {
            "example": {
                "sprint_name": "Foundation Setup",
                "selected_tasks": [
                    {
                        "task_id": "123e4567-e89b-12d3-a456-426614174000",
                        "title": "Set up testing framework",
                        "estimated_hours": 16.0,
                        "priority": "high",
                        "assigned_to": "Team Member 1"
                    }
                ],
                "summary": {
                    "total_capacity": 120.0,
                    "planned_hours": 16.0,
                    "utilization_percent": 13.3,
                    "tasks_count": 1,
                    "team_members": ["Team Member 1", "Team Member 2"],
                    "sprint_goal": "Establish foundational testing infrastructure"
                }
            }
        }
